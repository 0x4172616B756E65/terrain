use bevy::prelude::*;
use bevy::ecs::event::{Event, EventReader};
use bevy::render::mesh::SphereMeshBuilder;

use crate::simulation::ballistics::ammunition::nine_mm::Bullet;
use crate::simulation::physics::WorldState;

#[derive(Event)]
pub struct DebugShootEvent(pub (Transform, Vec3));

fn debug_shoot_bullet(mut events: EventReader<DebugShootEvent>, mut commands: Commands, mut asset_server: Res<AssetServer>) {
    for DebugShootEvent((transform, direction)) in events.read() {
        let world_state = WorldState::new();
        let bullet = Bullet::new_nine_mm(*direction, 0.360, 8_900., &world_state, Vec3::new(transform.translation.x, transform.translation.y, transform.translation.z));
        let sphere = SphereMeshBuilder::new(1., bevy::render::mesh::SphereKind::Ico { subdivisions: 1 }).build();
        let handle = asset_server.add(sphere);

        commands.spawn((
            Mesh3d(handle),
            bullet 
        ));
    } 
}
fn _debug_shoot_bullet_with_inventory() {}
